<html>
  <head>
    <title>Simple Marker</title>
    <link rel="stylesheet" href="./style.css" />
    <script>
      let marker = null;

         
    async function dropRandomPin() {
      const latMin = 20.0;
      const latMax = 75.0;
      const lngMin = -125.0;
      const lngMax = -70.0;

      let lat = latMin + Math.random() * (latMax - latMin);
      let lng = lngMin + Math.random() * (lngMax - lngMin);
      let randomPosition = {lat, lng};
      let response = await getCity(randomPosition);
      while (!response || response.country != "United States" || response.city == null) {
        lat = latMin + Math.random() * (latMax - latMin);
        lng = lngMin + Math.random() * (lngMax - lngMin);
        randomPosition = {lat, lng};
        response = await getCity(randomPosition);
      }

      const map = new google.maps.Map(document.getElementById("map"), {
          zoom: 4,
          center: randomPosition,
        });

      marker = new google.maps.Marker({ 
          position: randomPosition, 
          map: map 
        });

    }
    

      function initMap() {
        const mapCenter = { lat: 40, lng: -100 };
        const map = new google.maps.Map(document.getElementById("map"), {
          zoom: 4,
          center: mapCenter,
        });

        map.addListener("click", (event) => {
          addMaker(event.latLng, map);
          getCity(event.latLng);
        });
      }
      function addMaker(location, map) {
        if (marker) {
           marker.setMap(null);
        }
       
        marker = new google.maps.Marker({ 
          position: location, 
          map: map 
        });
      }

      async function getCity(latLng) {
        const geocoder = new google.maps.Geocoder();

        return new Promise((resolve, reject) => {
          geocoder.geocode({ location: latLng }, (results, status) => {
            if (status === "OK" && results[0]) {
              let city = null;
              let country = null;
              
              for (const component of results[0].address_components) {
                if (component.types.includes("locality")) {
                  city = component.long_name;
                }
                if (component.types.includes("country")) {
                  country = component.long_name; // or use component.short_name for the country code (e.g., "US")
                }
              }

              if (city || country) {
                console.log("City: ", city);
                console.log("Country: ", country);
                resolve({ city, country });
              } else {
                //console.log("No city or country found");
                resolve({ city: null, country: null });
              }
            } else {
              console.log("Error with geocoding:", status);
            }
          });
        });
      }    
      </script>

    <script async src="{{mapAPI}}&callback=initMap"></script>
  </head>
  <body>
    
    <div id="map" style="height: 500px; width: 100%"></div>
    <div class="flex justify-content-end pt-4 pr-8">
      <button onclick="dropRandomPin()">
        <svg xmlns="http://www.w3.org/2000/svg" class="" width="50" height="50" viewBox="0 0 640 512">
          <!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.-->
          <path
            d="M274.9 34.3c-28.1-28.1-73.7-28.1-101.8 0L34.3 173.1c-28.1 28.1-28.1 73.7 0 101.8L173.1 413.7c28.1 28.1 73.7 28.1 101.8 0L413.7 274.9c28.1-28.1 28.1-73.7 0-101.8L274.9 34.3zM200 224a24 24 0 1 1 48 0 24 24 0 1 1 -48 0zM96 200a24 24 0 1 1 0 48 24 24 0 1 1 0-48zM224 376a24 24 0 1 1 0-48 24 24 0 1 1 0 48zM352 200a24 24 0 1 1 0 48 24 24 0 1 1 0-48zM224 120a24 24 0 1 1 0-48 24 24 0 1 1 0 48zm96 328c0 35.3 28.7 64 64 64l192 0c35.3 0 64-28.7 64-64l0-192c0-35.3-28.7-64-64-64l-114.3 0c11.6 36 3.1 77-25.4 105.5L320 413.8l0 34.2zM480 328a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"
          />
        </svg>
      </button>
    </div>

  </body>
</html>
